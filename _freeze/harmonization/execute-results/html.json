{
  "hash": "3bdf4ad5e47a1888a94a9152bfe81b63",
  "result": {
    "markdown": "---\ntitle: \"Harmonization\"\nformat: html\n---\n\n\n**ComBatFamQC** provides four types of commonly used harmonization techniques, integrated through the [ComBatFamily](https://github.com/andy1764/ComBatFamily) package developed by Dr. Andrew Chen, for users to consider. The four harmonization techniques include:\n\n-   [Original ComBat (Johnson et al., 2007)](https://academic.oup.com/biostatistics/article-abstract/8/1/118/252073?redirectedFrom=fulltext&login=false)\n-   [Longitudinal ComBat (Beer et al., 2020)](https://www.sciencedirect.com/science/article/pii/S1053811920306157?via%3Dihub)\n-   [ComBat-GAM (Pomponio et al., 2020)](https://www.sciencedirect.com/science/article/pii/S1053811919310419?via%3Dihub)\n-   [CovBat (Chen et al., 2021)](https://onlinelibrary.wiley.com/doi/10.1002/hbm.25688)\n\nThere are two types of harmonization scenarios users can choose from:\n\n-   **First-time Harmonization** (Can also do interactive harmonization through Rshiny)\n-   **Out of Sample Harmonization**\n    -   predict from existing ComBat model (works only for <span style=\"color:blueviolet;\">original ComBat</span> and <span style=\"color:blueviolet;\">ComBat-GAM</span>)\n    -   harmonize new data toward existing reference data (works for all built-in ComBat harmonization methods)\n\n# First Harmonization\n___\n\nSpecify parameters carefully based on the harmonization method to be applied.\n\nUsers can also use the command-line interface via **ComBatQC_CLI.R** to start the harmonization stage. Apart from the same required parameters as the diagnosis stage(`features`, `covariates`, `batch`, `smooth`, `random`), using the command-line interface also requires users to set the following parameter:\n\n-   `--diagnosis/-d`: FALSE\n-   `--outdir`: Path to save the harmonized dataset (in .csv format)\n-   `--mout`: Path to save the ComBat model (optional if users do not wish to save the model; in .rds format)\n\n## Original ComBat\n\nA method designed for batch effect correction in cross-sectional data with linear covariate effects.\n\n::: {.callout-note collapse=\"true\"}\n## R code\n\n::: {.cell}\n\n```{.r .cell-code}\nfeatures <- colnames(adni)[c(43:104)]\ncovariates <- c(\"timedays\", \"AGE\", \"SEX\", \"DIAGNOSIS\")\ninteraction <- c(\"timedays,DIAGNOSIS\")\nbatch <- \"manufac\"\ncombat_model <- combat_harm(type = \"lm\", features = features, batch = batch, covariates = covariates, interaction = interaction, smooth = NULL, random = NULL, df = adni)\nhead(combat_model$harmonized_df)\n```\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## CLI code\n\n::: {.cell}\n\n```{.bash .cell-code}\nRscript path/to/combatQC_CLI.R path/to/unharmonized_data.csv -d FALSE --features 43-104 \n--covariates 9,11,13-14 -b 16 -i 9*14 -m lm --outdir /path/to/harmonized_data.csv --mout /path/to/saved_model.rds\n```\n:::\n\n:::\n\n## Longitudinal ComBat\n\nA method accounts for intra-subject correlation in longitudinal data by incorporating random effects into the model.\n\n::: {.callout-note collapse=\"true\"}\n## R code\n\n::: {.cell}\n\n```{.r .cell-code}\ncombat_model_lmer <- combat_harm(type = \"lmer\", features = features, batch = batch, covariates = covariates, interaction = interaction, smooth = NULL, random = \"subid\", df = adni)\nhead(combat_model_lmer$harmonized_df)\n```\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## CLI code\n\n::: {.cell}\n\n```{.bash .cell-code}\nRscript path/to/combatQC_CLI.R path/to/unharmonized_data.csv -d FALSE --features 43-104 \n--covariates 9,11,13-14 -b 16 -i 9*14 -m lmer -r 3 --outdir /path/to/harmonized_data.csv --mout /path/to/saved_model.rds\n```\n:::\n\n:::\n\n\n## ComBat-GAM\n\nA method allows for preservation of non-linear covariate effects through use of the generalized additive model.\n\n::: {.callout-note collapse=\"true\"}\n## R code\n\n::: {.cell}\n\n```{.r .cell-code}\ncombat_model_gam <- combat_harm(type = \"gam\", features = features, batch = batch, covariates = covariates, interaction = interaction, smooth = \"AGE\", smooth_int_type = \"linear\", df = adni)\nhead(combat_model_gam$harmonized_df)\n```\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## CLI code\n\n::: {.cell}\n\n```{.bash .cell-code}\nRscript path/to/combatQC_CLI.R path/to/unharmonized_data.csv -d FALSE --features 43-104 \n--covariates 9,11,13-14 -b 16 -i 9*14 -m gam -s 11 --outdir /path/to/harmonized_data.csv --mout /path/to/saved_model.rds\n```\n:::\n\n:::\n\n## CovBat\n\nCovBat is used for correcting covariance batch effects.\n\n::: {.callout-note collapse=\"true\"}\n## R code\n\n::: {.cell}\n\n```{.r .cell-code}\ncovbat_model <- combat_harm(type = \"gam\", features = features, batch = batch, covariates = covariates, interaction = interaction, smooth_int_type = \"linear\", smooth = \"AGE\", df = adni, family = \"covfam\")\nhead(covbat_model$harmonized_df)\n```\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## CLI code\n\n::: {.cell}\n\n```{.bash .cell-code}\nRscript path/to/combatQC_CLI.R path/to/unharmonized_data.csv -d FALSE --features 43-104 \n--covariates 9,11,13-14 -b 16 -i 9*14 -m gam -s 11 -f covfam --outdir /path/to/harmonized_data.csv --mout /path/to/saved_model.rds\n```\n:::\n\n:::\n\n# Out-of-Sample Harmonization\n___\n\n## from ComBat Model\n\nSpecify `predict` parameter to be TRUE and `object` parameter to be saved ComBat model.\n\n::: {.callout-note collapse=\"true\"}\n## R code\n\n::: {.cell}\n\n```{.r .cell-code}\nsaved_model <- combat_model_gam$combat.object\nharm_predict <- combat_harm(df = adni %>% head(1000), predict = TRUE, object = saved_model)\n```\n:::\n\n:::\n\nUsing the command-line interface requires users to set the following parameter:\n\n-   `--predict`: TRUE\n-   `--object/-o`: Path to the saved ComBat model (in .rds format)\n\n::: {.callout-tip collapse=\"true\"}\n## CLI code\n\n::: {.cell}\n\n```{.bash .cell-code}\nRscript path/to/combatQC_CLI.R path/to/unharmonized_data.csv -d FALSE --predict TRUE -o path/to/saved_model.rds --outdir /path/to/harmonized_data.csv\n```\n:::\n\n:::\n\n## from Reference Data\n\nSpecify `reference` parameter to be saved reference data. To be noticed, the reference data should have identical columns as the new data and the new data should contain reference data as its sub sample.\n\n::: {.callout-note collapse=\"true\"}\n## R code\n\n::: {.cell}\n\n```{.r .cell-code}\n# harmonize reference data\nreference_site <- adni %>% group_by(site) %>% summarize(count = n()) %>% arrange(desc(count)) %>% pull(site) %>% head(30)\nreference_df <- adni %>% filter(site %in% reference_site)\nfeatures <- colnames(reference_df)[c(43:104)]\ncovariates <- c(\"timedays\", \"AGE\", \"SEX\", \"DIAGNOSIS\")\ninteraction <- c(\"timedays,DIAGNOSIS\")\nbatch <- \"site\"\nref_model <- combat_harm(type = \"lmer\", features = features, batch = batch, covariates = covariates, interaction = interaction, smooth = NULL, random = \"subid\", df = reference_df)\n\n# harmonize new data to the reference data\nharm_new <- combat_harm(type = \"lmer\", features = features, batch = batch, covariates = covariates, interaction = interaction, smooth = NULL, random = \"subid\", df = adni, reference = ref_model$harmonized_df)\n```\n:::\n\n:::\n\nUsing the command-line interface requires users to set the following parameter:\n\n-   `--reference`: Path to the reference dataset \n\n::: {.callout-tip collapse=\"true\"}\n## CLI code\n\n::: {.cell}\n\n```{.bash .cell-code}\nRscript path/to/combatQC_CLI.R path/to/unharmonized_data.csv -d FALSE --features 43-104 --covariates 9,11,13-14 -b 16 -i 9*14 -m lmer -r 3 --reference path/to/reference.csv --outdir /path/to/harmonized_data.csv --mout /path/to/saved_model.rds\n```\n:::\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}